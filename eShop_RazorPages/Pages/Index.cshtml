@page
@using System.Net;
@using System.Linq
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="container">
    <form method="get" class="form-inline my-2 my-lg-0">
        <input class="form-control mr-sm-2" type="search" placeholder="Search by product" name="searchText" value="@Model.SearchText" />
        <select class="form-control mr-sm-2" name="selectedCategory">
            <option value="">Select Category</option>
            @foreach (var category in Model.Categories)
            {
                <option value="@category.Name">@category.Name</option>
            }
        </select>
        <select class="form-control mr-sm-2" name="selectedSupplier">
            <option value="">Select Supplier</option>
            @foreach (var supplier in Model.Suppliers)
            {
                <option value="@supplier.Name">@supplier.Name</option>
            }
        </select>
        <select class="form-control mr-sm-2" id="sortPrice">
            <option value="">Sort by Price</option>
            <option value="asc">Lowest to Highest</option>
            <option value="desc">Highest to Lowest</option>
        </select>

        <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>

    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            @for (int i = 0; i < Model.FeaturedProducts.Count; i++)
            {
                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @i"></button>
            }
        </div>
        <div class="carousel-inner">
            @for (int i = 0; i < Model.FeaturedProducts.Count; i++)
            {
                var product = Model.FeaturedProducts[i];
                <div class="carousel-item @(i == 0 ? "active" : "")">
                    <img src="@product.Images?.FirstOrDefault()?.Url" class="d-block w-100" alt="@product.Name">
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@product.Name</h5>
                        <p>@product.Description</p>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <div class="btn-group">
            <a href="/Cart" class="btn btn-sm btn-outline-secondary">View Cart (@Model.ShoppingCart.Sum(i => i.Quantity))</a>
        </div>
    </div>

    <div class="row">
        @foreach (var product in Model.Products)
        {
            <div class="col-md-4 product-card">
                <div class="card mb-4 shadow-sm">
                    <img src="@product.Images?.FirstOrDefault()?.Url" class="card-img-top image-hover" alt="@product.Name" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text"><strong>Category:</strong> @product.Category.Name</p>
                        <p class="card-text"><strong>Supplier:</strong> @product.Supplier.Name</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <form method="post" asp-page-handler="AddToBasket">
                                    <input type="hidden" name="productId" value="@product.ProductId" />
                                    <button type="submit" class="btn btn-sm btn-outline-secondary">Add to Cart</button>
                                </form>
                            </div>
                            <small class="text-muted product-price">@product.Price.ToString("C")</small>
                        </div>
                    </div>
                </div>
            </div>
        }
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @{
                    var prevDisabled = Model.Products.IsFirstPage ? "disabled" : "";
                    var nextDisabled = Model.Products.IsLastPage ? "disabled" : "";
                }

                <li class="page-item @prevDisabled">
                    <a class="page-link" asp-page="./Index" asp-route-pageNumber="@(Model.PageNumber - 1)" asp-route-searchText="@Model.SearchText">Previous</a>
                </li>

                @for (int i = 1; i <= Model.Products.PageCount; i++)
                {
                    <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                        <a class="page-link" asp-page="./Index" asp-route-pageNumber="@i" asp-route-searchText="@Model.SearchText">@i</a>
                    </li>
                }

                <li class="page-item @nextDisabled">
                    <a class="page-link" asp-page-handler="Index" asp-route-pageNumber="@(Model.PageNumber + 1)" asp-route-searchText="@Model.SearchText">Next</a>
                </li>
            </ul>
        </nav>

    </div>
</div>

@section Scripts {
    <script>
        document.getElementById("sortPrice").addEventListener("change", function () {
            let sortOrder = this.value;
            let productCards = document.getElementsByClassName("product-card");

            let productArray = Array.from(productCards).map(card => {
                let price = card.querySelector(".product-price").innerText;
                return {
                    element: card,
                    price: parseFloat(price.replace(/[^0-9.-]+/g, ""))
                };
            });

            if (sortOrder === "asc") {
                productArray.sort((a, b) => a.price - b.price);
            } else if (sortOrder === "desc") {
                productArray.sort((a, b) => b.price - a.price);
            }

            let productRow = document.querySelector(".row");
            productRow.innerHTML = "";

            productArray.forEach(product => {
                productRow.appendChild(product.element);
            });
        });
    </script>
}
